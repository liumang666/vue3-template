name: Deploy to GitHub Pages # 工作流名称

on: # 触发事件
  push: # 推送的时候
    branches: # 推送触发工作流的分支
      - main

permissions:
  contents: write # 允许写入代码（包括 Tag）
  pages: write # 允许写入 GitHub Pages
  id-token: write # 允许生成 OIDC 令牌（关键！）

jobs: # 定义作业
  build: # 作业 ID
    runs-on: ubuntu-latest # 运行环境m ubuntu-latest是 github actions 提供使用的环境名称之一（最新的 Ubuntu 版本）

    # strategy: # 步骤2
    #   matrix: # 矩阵策略（并行测试多个 Node 版本）
    #     node-version: [14.x, 16.x, 18.x]

    steps: # 步骤序列
      # 检出代码
      - name: Checkout Code
        uses: actions/checkout@v4 # 使用官方检出 Action
        with:
          fetch-depth: 0 # 获取完整历史记录（用于生成 tag）

      # 设置 Node.js 环境（如果是前端项目）
      # - name: Use Node.js ${{ matrix.node-version }} # 步骤2：设置 Node 环境
      #   uses: actions/setup-node@v4
      #   with:
      #     node-version: ${{ matrix.node-version }}

      - name: Setup Node.js
        uses: actions/setup-node@v4 # 官方 Node.js setup action
        with:
          node-version: '20'
          # cache: 'pnpm'
      - name: Setup pnpm
        uses: pnpm/action-setup@v2 # 官方 pnpm setup action
        with:
          version: 9

      # 安装依赖并打包
      # - name: Install and Build
      #   run: |
      #     npm install
      #     npm run build # 假设打包命令是 `npm run build`

      # - name: Install Dependencies
      #   run: npm install # 等同于 npm install --frozen-lockfile
      - name: Install Dependencies
        run: pnpm install --frozen-lockfile

      - name: Build
        run: pnpm build # 假设打包命令是 `npm run build`

      - name: upload-artifact # 上传打包产物
        # 专为GitHub Pages部署优化：仅用于上传静态网站文件（如HTML、CSS、JS），并确保文件格式符合GitHub Pages的部署要求。
        # 上传阶段：使用upload-pages-artifact将静态文件打包为Artifact并上传至GitHub临时存储。
        uses: actions/upload-pages-artifact@v3
        with:
          path: './dist' # 自动将dist/目录打包为符合要求的tar.gz文件

  deploy: # 作业 ID
    needs: build # 依赖于 build 作业
    runs-on: ubuntu-latest # 运行环境m ubuntu-latest是 github actions 提供使用的环境名称之一（最新的 Ubuntu 版本）
    steps:
      # 代码检出是为了，部署成功后，自动生成tag，自作自动部署不需要配置这个
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # 获取完整历史记录，以便操作 Tag

      # 部署到 GitHub Pages
      # - name: Deploy to GitHub Pages
      #   uses: peaceiris/actions-gh-pages@v3 # 默认推送到gh-pages分支。如果gh-pages分支不存在，会自动创建
      #   with:
      #     github_token: ${{ secrets.GITHUB_TOKEN }}
      #     publish_dir: ./dist # 打包输出的目录（根据项目调整）
      #     commit_message: 'Deploy to GitHub Pages'
      - name: Deploy to GitHub Pages
        # 部署阶段：deploy-pages@v4从临时存储中获取Artifact，并将其发布到GitHub Pages指定的环境（如github-pages）。
        uses: actions/deploy-pages@v4

      # 生成 master tag
      - name: Create Master Tag
        if: ${{ success() }} # 仅当部署成功时执行
        # github-actions[bot]   GitHub 官方机器人的标准用户名
        # github-actions[bot]@users.noreply.github.com  GitHub 机器人的专用无回复邮箱

        # 获取最新 Tag（如 v1.0.0）
        run: |
          LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
          VERSION=$(echo $LATEST_TAG | sed 's/v//')
          MAJOR=$(echo $VERSION | cut -d'.' -f1)
          MINOR=$(echo $VERSION | cut -d'.' -f2)
          PATCH=$(echo $VERSION | cut -d'.' -f3)
          NEW_PATCH=$((PATCH + 1))
          NEW_TAG="v${MAJOR}.${MINOR}.${NEW_PATCH}"

          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git tag -a $NEW_TAG -m "Release $NEW_TAG"
          git push origin $NEW_TAG
